/* 
Description: 
Given two sets of elements, find the sum of all distinct elements from the set. 
In other words, find the sum of all elements which are present in either of the given set. 
Example:
Set 1 : [3, 1, 7, 9], Set 2: [2, 4, 1, 9, 3]
Output: 13 (distinct elements - 4, 7, 2 )
Give two Solution to this problem, using a different type of data structures each time.
Now, given two sets of integers, write also two algorithms to print the sum of overlapping elements in two sets. The elements in each set are unique or there are no duplicates within a set.
Example:
Set 1: [12, 13, 6, 10]
Set 2: [13, 10, 16, 15]
Sum of overlapping elements: 46
Explanation: Common elements are 10, 13 
*/
ALGORITHM algorithm_name
VAR
    set1, set2, distinct_set : ARRAY_OF [length];
    i,j :INTEGER :=0;
BEGIN
    //find the distinct numbers in the two sets by erasing the common elements
    WHILE (i<set1.length-1) DO
        WHILE (j<set2.length-1) DO
            set1[i]:= set1[i+1];
            set2[j]:= set2[j+1];
            j:=j+1;
        END_WHILE
        i:=i+1;
    END_WHILE
    //sum
END